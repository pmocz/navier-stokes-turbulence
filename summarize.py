import numpy as np
import matplotlib.pyplot as plt
import argparse
import os

"""
Philip Mocz (2025), @pmocz

Summarize processed simulation results as a function of resolution.
This script is designed to be run after the `analyze.py` script has been executed for
each resolution. It will load the results from the `results.npz` files generated by
`analyze.py` and plot the results.

"""


parser = argparse.ArgumentParser(
    description="Summarize Navier-Stokes Simulation Results"
)
parser.add_argument("--show", action="store_true", help="Show plots interactively")
args = parser.parse_args()


def summarize_results(resolutions):
    """
    Summarize results from multiple resolutions.

    Parameters:
    resolutions (list): List of resolutions to summarize.
    """
    fig = plt.figure(figsize=(8, 6))

    # Find the maximum resolution for which results exist
    existing_res = [
        res for res in resolutions if os.path.exists(f"checkpoints{res}/results_Pf.npz")
    ]

    timings = []

    for res in existing_res:
        results_path = f"checkpoints{res}/results_Pf.npz"
        data = np.load(results_path)
        k = data["k"]
        Pf_all = data["Pf_all"]

        # also read the timings
        with open(f"checkpoints{res}/timing.txt", "r") as f:
            timing_data = f.readlines()
            for line in timing_data:
                if "seconds" in line:
                    time_taken = float(line.split()[0])
                    timings.append(time_taken)

        # Plot the power spectra
        Nsnap = Pf_all.shape[0]
        for i in range(0, Nsnap, 2):
            Pf = Pf_all[i]
            color = plt.cm.turbo(i / Nsnap)
            label = f"res={res}$^3$" if i == Nsnap - 1 else None
            plt.plot(
                k,
                Pf,
                label=label,
                linewidth=0.5 + res / 256.0,
                color=color,
                alpha=np.log2(res) / 11.0,
            )

    # plot a -5/3 reference line
    k_ref = np.linspace(2, 256, 100)
    ref_line = 50.0 * k_ref ** (-5 / 3)
    plt.plot(k_ref, ref_line, "k--", label="-5/3", linewidth=1)
    plt.title("Velocity Power Spectrum as a function of resolution and time")
    plt.xlabel("wavenumber (k)")
    plt.ylabel("velocity power spectrum")
    plt.xscale("log")
    plt.yscale("log")
    plt.legend(loc="upper right")
    plt.xlim([1.0, 128.0])
    plt.ylim([1.0e-4, 4.0e1])
    plt.savefig("pspec.png")
    if args.show:
        plt.show()
    plt.close(fig)

    # Plot the timings
    fig = plt.figure(figsize=(8, 6))
    res_ref = np.linspace(32, 2048, 100)
    ref_line = 0.0001 * res_ref**3
    plt.plot(res_ref, ref_line, "k--", label="3", linewidth=1)
    plt.plot(existing_res, timings, marker="o")
    plt.title("Timings")
    plt.xlabel("resolution")
    plt.ylabel("time (seconds)")
    plt.xscale("log")
    plt.yscale("log")
    plt.xticks(resolutions, labels=[str(r) for r in resolutions])
    plt.ylim(1e1, 1e5)
    plt.savefig("timings.png")
    if args.show:
        plt.show()
    plt.close(fig)


if __name__ == "__main__":
    # Define the resolutions to summarize
    resolutions = [32, 64, 128, 256, 512, 1024, 2048]  # Add more resolutions as needed

    # Call the summarization function
    summarize_results(resolutions)
