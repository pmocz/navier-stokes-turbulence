import numpy as np
import matplotlib.pyplot as plt
import argparse
import os

"""
Philip Mocz (2025), @pmocz

Summaize processed simulation results as a function of resolution.
This script is designed to be run after the `analyze.py` script has been executed for
each resolution. It will load the results from the `results.npz` files generated by
`analyze.py` and plot the results.

"""


parser = argparse.ArgumentParser(
    description="Summarize Navier-Stokes Simulation Results"
)
parser.add_argument("--show", action="store_true", help="Show plots interactively")
args = parser.parse_args()


def summarize_results(resolutions):
    """
    Summarize results from multiple resolutions.

    Parameters:
    resolutions (list): List of resolutions to summarize.
    """
    fig = plt.figure(figsize=(8, 6))

    for res in resolutions:
        results_path = f"checkpoints{res}/results.npz"
        if os.path.exists(results_path):
            data = np.load(results_path)
            k = data["k"]
            Pf_all = data["Pf_all"]

            # Plot the power spectra
            for i in range(Pf_all.shape[0]):
                Pf = Pf_all[i]
                color = plt.cm.viridis(i / Pf_all.shape[0])
                plt.plot(
                    k,
                    Pf,
                    label=f"Resolution {res} (Checkpoint {i})",
                    linewidth=res / 64,
                    color=color,
                )

    # plot a -5/3 reference line
    k_ref = np.linspace(20, 200, 100)
    ref_line = 0.01 * k_ref ** (-1 / 3)
    plt.plot(k_ref, ref_line, "k--", label="-1/3", linewidth=1)

    plt.xlabel("Wavenumber (k)")
    plt.ylabel("Power Spectrum")
    plt.xscale("log")
    plt.yscale("log")
    plt.ylim([1.0e-11, 1.0e-1])
    plt.savefig("summary.png")
    if args.show:
        plt.show()
    plt.close(fig)


if __name__ == "__main__":
    # Define the resolutions to summarize
    resolutions = [32, 64, 128]  # Add more resolutions as needed

    # Call the summarization function
    summarize_results(resolutions)
